apiVersion: v1
kind: Service
metadata:
  name: db
  namespace: social
labels:
  app: postgres
spec:
  ports:
    - name: pg
      port: 5432
      targetPort: 5432
  clusterIP: None
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: social
spec:
  serviceName: db
  replicas: 1
  selector:
    matchLabels: { app: postgres }
  template:
    metadata:
      labels: { app: postgres }
    spec:
      containers:
        - name: postgres
          image: postgres:16.3
          ports: [{ name: pg, containerPort: 5432 }]
          envFrom:
            - secretRef: { name: db-secrets }   # from ExternalSecret or fallback
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
            - { name: init-sql, mountPath: /docker-entrypoint-initdb.d }
          resources:
            requests: { cpu: "250m", memory: "512Mi" }
            limits:   { cpu: "1",    memory: "1Gi" }
          livenessProbe:
            exec: { command: ["pg_isready","-U","$(POSTGRES_USER)"] }
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec: { command: ["pg_isready","-U","$(POSTGRES_USER)"] }
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: init-sql
          configMap:
            name: db-init-sql
  volumeClaimTemplates:
    - metadata: { name: data }
      spec:
        accessModes: ["ReadWriteOnce"]
        resources: { requests: { storage: 10Gi } }
